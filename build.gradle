import java.nio.file.Files
import java.nio.file.Path
import java.nio.file.Paths
import static org.gradle.api.JavaVersion.VERSION_1_8
import static org.gradle.jvm.toolchain.JavaLanguageVersion.of
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import net.corda.plugins.apiscanner.GenerateApi

plugins {
    id 'org.jetbrains.kotlin.jvm' apply false
    id 'net.corda.plugins.api-scanner' apply false
    id 'net.corda.plugins.publish-utils'
    id 'com.jfrog.artifactory'
    id 'org.owasp.dependencycheck'
    id 'base'
}

version corda_djvm_version

subprojects {
    group 'net.corda.djvm'
    version corda_djvm_version

    pluginManager.withPlugin('java') {
        java {
            toolchain {
                // Compile using JDK8 by default.
                languageVersion = of(8)
            }
        }
    }

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-XDenableSunApiLintControl' << '-Werror'
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            apiVersion = '1.2'
            languageVersion = '1.2'
            jvmTarget = VERSION_1_8
            freeCompilerArgs = ['-Xjvm-default=enable']
            allWarningsAsErrors = true
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes('Corda-Vendor': 'Corda Open Source')
        }
    }

    tasks.withType(Test).configureEach {
        javaLauncher = javaToolchains.launcherFor {
            // Test using JDK11 by default.
            languageVersion = of(11)
        }
        useJUnitPlatform()

        // Prevent the project from creating temporary files outside of the build directory.
        systemProperty 'java.io.tmpdir', buildDir.absolutePath

        // Configure the host timezone to match the DJVM's.
        systemProperty 'user.timezone', 'UTC'

        // Choose which garbage-collector to use.
        jvmArgs '-XX:+UseG1GC'

        // DJVM needs reflective access to these packages.
        jvmArgs '--add-opens', 'java.base/java.lang.reflect=ALL-UNNAMED',
                '--add-opens', 'java.base/java.time=ALL-UNNAMED',
                '--illegal-access=warn'
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }
}

bintrayConfig {
    user = System.getenv('CORDA_BINTRAY_USER')
    key = System.getenv('CORDA_BINTRAY_KEY')
    repo = 'corda'
    org = 'r3'
    licenses = ['GPLv2+CE']
    vcsUrl = 'https://github.com/corda/djvm'
    projectUrl = 'https://github.com/corda/djvm'
    gpgSign = true
    gpgPassphrase = System.getenv('CORDA_BINTRAY_GPG_PASSPHRASE')
    publications = [
        'corda-djvm',
        'corda-djvm-cli'
    ]
    license {
        name = 'GPLv2+CE'
        url = 'https://openjdk.java.net/legal/gplv2+ce.html'
        distribution = 'repo'
    }
    developer {
        id = 'R3'
        name = 'R3'
        email = 'dev@corda.net'
    }
}

artifactory {
    publish {
        // Load Artifactory credentials from either:
        // - $HOME/.artifactory_credentials, or
        // - the environment
        Properties credentials = new Properties()
        Path artifactoryCredentials = Paths.get(System.getProperty('user.home'), '.artifactory_credentials')
        if (Files.isReadable(artifactoryCredentials)) {
            artifactoryCredentials.withInputStream { input ->
                credentials.load(input)
            }
        }

        contextUrl = artifactory_contextUrl
        repository {
            repoKey = 'corda-dependencies-dev'
            username = credentials.getProperty('artifactory.username', System.getenv('CORDA_ARTIFACTORY_USERNAME'))
            password = credentials.getProperty('artifactory.apikey', System.getenv('CORDA_ARTIFACTORY_APIKEY'))
        }

        defaults {
            // The root project has applied 'publish-utils' but has nothing to publish.
            if (project != rootProject) {
                publications(project.extensions.publish.name())
            }
        }
    }
}

tasks.register('generateApi', GenerateApi) {
    baseName = 'api-djvm'
}

wrapper {
    gradleVersion = '6.7.1'
    distributionType = Wrapper.DistributionType.ALL
}
