import static org.gradle.api.JavaVersion.*
import aQute.bnd.gradle.Bundle

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'com.github.johnrengelman.shadow'
    id 'biz.aQute.bnd.builder' apply false
    id 'net.corda.plugins.publish-utils'
    id 'net.corda.plugins.api-scanner'
    id 'com.jfrog.artifactory'
    id 'java-library'
    id 'idea'
}

description 'Corda deterministic JVM sandbox'

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dependencies"
        content {
            includeGroup 'net.corda'
        }
    }
}

if (current().java9Compatible) {
    sourceSets {
        // Exclude test classes which cannot be compiled for Java > 8.
        test {
            java {
                exclude 'net/corda/djvm/execution/DatatypeConverterTest.java'
            }
        }
    }
}

configurations {
    jdkRt
    sandboxTesting
    shadow.extendsFrom bundles
    testImplementation.extendsFrom shadow
}

dependencies {
    bundles "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    bundles "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    bundles "org.slf4j:slf4j-api:$slf4j_version"
    compileOnly "org.osgi:osgi.annotation:$osgi_version"

    // ASM: byte code manipulation library
    implementation "org.ow2.asm:asm:$asm_version"
    implementation "org.ow2.asm:asm-commons:$asm_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    // ClassGraph: classpath scanning
    testImplementation "io.github.classgraph:classgraph:$class_graph_version"

    // A crypto provider, just for testing.
    testImplementation "org.bouncycastle:bcprov-jdk15on:$bouncycastle_version"

    // Test utilities
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    jdkRt "net.corda:deterministic-rt:$deterministic_rt_version"

    // The DJVM will need this classpath to run the unit tests.
    sandboxTesting files(sourceSets.getByName("test").output)
    sandboxTesting "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    sandboxTesting "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
}

tasks.named('jar', Jar) {
    enabled = false
}

tasks.named('sourceJar', Jar) {
    exclude 'sandbox/**'
}

tasks.named('javadoc', Javadoc) {
    exclude 'sandbox/**'
}

def shadowJar = tasks.named('shadowJar', Jar) {
    archiveAppendix = "shadow"
    archiveClassifier = ''
    reproducibleFileOrder = true
    relocate 'org.objectweb.asm', 'djvm.org.objectweb.asm'

    // Discard the ASM library's module information.
    exclude 'module-info.class'

    manifest {
        attributes('Automatic-Module-Name': 'net.corda.djvm')
        attributes('Sealed': true)
    }

    // These particular classes are only needed to "bootstrap"
    // the compilation of the other sandbox classes. At runtime,
    // we will generate better versions from deterministic-rt.jar.
    exclude 'sandbox/java/io/BufferedInputStream.class'
    exclude 'sandbox/java/io/DataInputStream.class'
    exclude 'sandbox/java/io/InputStream.class'
    exclude 'sandbox/java/lang/Appendable.class'
    exclude 'sandbox/java/lang/CharSequence.class'
    exclude 'sandbox/java/lang/Character\$Subset.class'
    exclude 'sandbox/java/lang/Character\$Unicode*.class'
    exclude 'sandbox/java/lang/Comparable.class'
    exclude 'sandbox/java/lang/Enum.class'
    exclude 'sandbox/java/lang/Exception.class'
    exclude 'sandbox/java/lang/ExceptionInInitializerError.class'
    exclude 'sandbox/java/lang/Iterable.class'
    exclude 'sandbox/java/lang/Number.class'
    exclude 'sandbox/java/lang/Package.class'
    exclude 'sandbox/java/lang/SecurityManager.class'
    exclude 'sandbox/java/lang/StackTraceElement.class'
    exclude 'sandbox/java/lang/StringBuffer.class'
    exclude 'sandbox/java/lang/StringBuilder.class'
    exclude 'sandbox/java/lang/Thread.class'
    exclude 'sandbox/java/lang/annotation/**'
    exclude 'sandbox/java/lang/ref/ReferenceQueue.class'
    exclude 'sandbox/java/lang/reflect/Annotated*.class'
    exclude 'sandbox/java/lang/reflect/GenericDeclaration.class'
    exclude 'sandbox/java/lang/reflect/InvocationTargetException.class'
    exclude 'sandbox/java/lang/reflect/Member.class'
    exclude 'sandbox/java/lang/reflect/*Type*.class'
    exclude 'sandbox/java/math/**'
    exclude 'sandbox/java/net/**'
    exclude 'sandbox/java/nio/Buffer.class'
    exclude 'sandbox/java/nio/ByteBuffer.class'
    exclude 'sandbox/java/nio/ByteOrder.class'
    exclude 'sandbox/java/nio/charset/Charset.class'
    exclude 'sandbox/java/nio/charset/spi/**'
    exclude 'sandbox/java/security/AccessControlException.class'
    exclude 'sandbox/java/security/PrivilegedAction.class'
    exclude 'sandbox/java/security/PrivilegedActionException.class'
    exclude 'sandbox/java/security/PrivilegedExceptionAction.class'
    exclude 'sandbox/java/security/ProtectionDomain.class'
    exclude 'sandbox/java/time/Duration.class'
    exclude 'sandbox/java/time/Instant.class'
    exclude 'sandbox/java/time/Local*.class'
    exclude 'sandbox/java/time/Month*.class'
    exclude 'sandbox/java/time/Offset*.class'
    exclude 'sandbox/java/time/Period.class'
    exclude 'sandbox/java/time/Year*.class'
    exclude 'sandbox/java/time/Zone*.class'
    exclude 'sandbox/java/time/zone/ZoneRulesException.class'
    exclude 'sandbox/java/time/zone/*ZoneRulesProvider.class'
    exclude 'sandbox/java/util/concurrent/ConcurrentMap.class'
    exclude 'sandbox/java/util/concurrent/ConcurrentHashMap\$CollectionView.class'
    exclude 'sandbox/java/util/concurrent/TimeUnit.class'
    exclude 'sandbox/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.class'
    exclude 'sandbox/java/util/concurrent/atomic/AtomicLongFieldUpdater.class'
    exclude 'sandbox/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.class'
    exclude 'sandbox/java/util/concurrent/locks/Condition.class'
    exclude 'sandbox/java/util/concurrent/locks/Lock.class'
    exclude 'sandbox/java/util/function/**'
    exclude 'sandbox/java/util/zip/Checksum.class'
    exclude 'sandbox/java/util/*List*.class'
    exclude 'sandbox/java/util/*Map*.class'
    exclude 'sandbox/java/util/*Set*.class'
    exclude 'sandbox/java/util/Collection*.class'
    exclude 'sandbox/java/util/Comparator.class'
    exclude 'sandbox/java/util/Currency.class'
    exclude "sandbox/java/util/Date.class"
    exclude 'sandbox/java/util/Enumeration.class'
    exclude 'sandbox/java/util/Hashtable.class'
    exclude 'sandbox/java/util/Iterator.class'
    exclude 'sandbox/java/util/Locale.class'
    exclude 'sandbox/java/util/MissingResourceException.class'
    exclude 'sandbox/java/util/Properties.class'
    exclude 'sandbox/java/util/ResourceBundle*.class'
    exclude 'sandbox/java/util/UUID.class'
    exclude 'sandbox/javax/security/auth/x500/X500Principal.class'
    exclude 'sandbox/sun/security/x509/X500Name.class'
    exclude 'sandbox/sun/util/calendar/ZoneInfoFile.class'
}

ext {
    // Lazy property to be invoked as a bnd macro.
    shadowJarURI = shadowJar.flatMap { jar ->
        jar.archiveFile.map { file ->
            file.asFile.toURI()
        }
    }
}

def bundle = tasks.register('bundle', Bundle) {
    from shadowJar.map { zipTree(it.archiveFile) }

    archiveBaseName = 'corda-djvm'
    reproducibleFileOrder = true
    archiveClassifier = ''

    bnd """\
-include: "jar:\${project.shadowJarURI}!/META-INF/MANIFEST.MF"
-fixupmessages "Classes found in the wrong directory"; restrict:=error; is:=warning
Bundle-SymbolicName: net.corda.djvm
Bundle-Name: DJVM
Import-Package: \
  !sandbox.*,\
  *
"""
}

def securityPolicy = file('permissive.policy')

tasks.withType(Test).configureEach {
    systemProperty 'deterministic-rt.path', configurations.jdkRt.asPath
    systemProperty 'sandbox-libraries.path', configurations.sandboxTesting.asPath

    // A security policy that allows known code-bases to do anything.
    systemProperty 'java.security.policy', "=${securityPolicy.toURI()}"
    systemProperty 'test.gradle.user.home', gradle.gradleUserHomeDir.toURI()
    systemProperty 'test.gradle.home', gradle.gradleHomeDir.toURI()
    systemProperty 'test.project.uri', projectDir.toURI()

    if (current().java9Compatible) {
        // https://openjdk.java.net/jeps/165
        jvmArgs '-XX:+UnlockDiagnosticVMOptions',
                "-XX:CompilerDirectivesFile=$rootDir/compiler-control.json"
    } else {
        // Disable JIT compilation of sandbox.* classes because they are discarded after use.
        // https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html
        jvmArgs '-XX:CompileCommand=quiet', '-XX:CompileCommand=exclude,sandbox/*.*'
    }
}

artifacts {
    archives bundle.flatMap { it.archiveFile }
    bundles bundle.flatMap { it.archiveFile }
    publish bundle.flatMap { it.archiveFile }
}

scanApi {
    excludePackages = [
        'sandbox',
        'djvm'
    ]
}

publish {
    dependenciesFrom(configurations.bundles) {
        defaultScope = 'compile'
    }
    name = bundle.flatMap { it.archiveBaseName }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
