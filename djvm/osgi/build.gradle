import aQute.bnd.gradle.Bundle
import aQute.bnd.gradle.Resolve
import aQute.bnd.gradle.TestOSGi

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'net.corda.plugins.publish-utils'
    id 'net.corda.plugins.api-scanner'
    id 'biz.aQute.bnd.builder'
    id 'com.jfrog.artifactory'
    id 'java-library'
    id 'idea'
}

description 'OSGi extensions for DJVM'

evaluationDependsOn(':djvm:secure')

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dependencies"
        content {
            includeGroup 'net.corda'
        }
    }
}

configurations {
    jdkRt
    sandboxTesting

    kotlinJar {
        transitive = false
    }

    [ runtimeClasspath, testRuntimeClasspath ].forEach { cfg ->
        cfg.resolutionStrategy {
            dependencySubstitution {
                substitute module('org.jetbrains.kotlin:kotlin-stdlib') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlin_version")
                substitute module('org.jetbrains.kotlin:kotlin-reflect') with module("org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlin_version")
            }
        }
    }
}

dependencies {
    kotlinJar "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    kotlinJar "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    api project(path: ':djvm', configuration: 'bundles')
    compileOnly "org.osgi:osgi.annotation:$osgi_version"

    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:$junit_platform_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.framework:$felix_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felix_scr_version"
    testRuntimeOnly "org.osgi:org.osgi.service.cm:$osgi_cm_version"
    testRuntimeOnly "org.osgi:org.osgi.util.function:$osgi_util_function_version"
    testRuntimeOnly "org.osgi:org.osgi.util.promise:$osgi_util_promise_version"

    // OSGi Logging Service, implemented by Felix and consumed by Logback.
    testRuntimeOnly "org.osgi:org.osgi.util.pushstream:$osgi_util_pushstream_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felix_configadmin_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.log:$felix_log_version"
    testRuntimeOnly "org.apache.felix:org.apache.felix.logback:$felix_logback_version"
    testRuntimeOnly "ch.qos.logback:logback-classic:$logback_version"

    jdkRt "net.corda:deterministic-rt:$deterministic_rt_version"
    sandboxTesting "org.slf4j:slf4j-nop:$slf4j_version"
    sandboxTesting(project(':djvm:secure')) {
        transitive = false
    }
}

ext {
    kotlinJars = provider {
        configurations.kotlinJar.collect { file -> "$file;version=file" }.join(',')
    }

    deterministicRt = provider {
        configurations.jdkRt.asPath
    }

    sandboxJars = provider {
        configurations.sandboxTesting.asPath
    }
}

def jar = tasks.named('jar', Jar) {
    archiveBaseName = 'corda-djvm-osgi'

    bnd """
Bundle-Name: DJVM extensions for OSGi.
Bundle-SymbolicName: net.corda.djvm.osgi
"""
}

def testBundle = tasks.register('testBundle', Bundle) {
    archiveClassifier = 'tests'
    from sourceSets.test.output
    sourceSet = sourceSets.test

    bnd """
Bundle-SymbolicName: net.corda.djvm.osgi.testing
Test-Cases: \${classes;HIERARCHY_INDIRECTLY_ANNOTATED;org.junit.platform.commons.annotation.Testable;CONCRETE}
"""
}

def resolve = tasks.register('resolve', Resolve) {
    bundles = sourceSets.test.runtimeClasspath + configurations.archives.artifacts.files
    bndrun = 'test.bndrun'
}

// Use test cases from this project, as we're only really
// interested in the DJVM's behaviour under OSGi here.
def secureJar = project(':djvm:secure').tasks.named('jar', Jar)

def testOSGi = tasks.register('testOSGi', TestOSGi) {
    dependsOn resolve, secureJar
    bundles = sourceSets.test.runtimeClasspath + configurations.archives.artifacts.files
    bndrun = 'test.bndrun'
}

tasks.named('test', Test) {
    enabled = false
}

tasks.named('check') {
    dependsOn resolve, testOSGi
}

artifacts {
    archives testBundle
}

publish {
    name = jar.flatMap { it.archiveBaseName }
}
