import static org.gradle.api.JavaVersion.VERSION_1_8
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
}

ext {
    artifactory_contextUrl = 'https://software.r3.com/artifactory'
}

group 'com.example.djvm'
version '1.0-SNAPSHOT'

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dev"
    }
    maven {
        url "$artifactory_contextUrl/corda-lib"
    }
    mavenCentral()
}

configurations {
    sandboxTesting
    jdkRt.resolutionStrategy {
        // Always check the repository for a newer SNAPSHOT.
        cacheChangingModulesFor 0, 'seconds'
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "com.r3.corda.lib.tokens:tokens-contracts:$corda_tokens_version"
    implementation "com.r3.corda.lib.tokens:tokens-money:$corda_tokens_version"
    implementation "net.corda:corda-core-deterministic:$corda_version"

    testImplementation "net.corda:corda-djvm:$djvm_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    jdkRt "net.corda:deterministic-rt:latest.integration"

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    sandboxTesting sourceSets.getByName("main").runtimeClasspath
    sandboxTesting "org.slf4j:slf4j-nop:$slf4j_version"
}

tasks.withType(JavaCompile) {
    sourceCompatibility = VERSION_1_8
    targetCompatibility = VERSION_1_8
    options.encoding = 'UTF-8'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        languageVersion = '1.3'
        apiVersion = '1.3'
        jvmTarget = VERSION_1_8
        freeCompilerArgs = ['-Xjvm-default=enable']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
    systemProperty 'deterministic-rt.path', configurations.jdkRt.asPath
    systemProperty 'sandbox-libraries.path', configurations.sandboxTesting.asPath
}

def djvmProject = gradle.includedBuilds.find { it.name == 'deterministic-jvm-sandbox' }
if (djvmProject) {
    assemble.dependsOn djvmProject.task(':djvm:assemble')
}

wrapper {
    gradleVersion = "5.5.1"
    distributionType = Wrapper.DistributionType.ALL
}
