import static org.gradle.api.JavaVersion.VERSION_1_8
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'scala'
}

ext {
    artifactory_contextUrl = 'https://software.r3.com/artifactory'
}

group 'com.example.djvm'
version djvm_version

repositories {
    maven {
        url "$artifactory_contextUrl/corda-dev"
        content {
            includeGroupByRegex 'net\\.corda(\\..*)?'
        }
        mavenContent {
            snapshotsOnly()
        }
    }
    maven {
        url "$artifactory_contextUrl/corda"
        content {
            includeGroupByRegex 'net.corda(\\..*)?'
            includeModule 'co.paralleluniverse', 'quasar-core'
        }
    }
    maven {
        url "$artifactory_contextUrl/corda-lib"
        content {
            includeGroup 'com.r3.corda.lib.tokens'
        }
    }
    mavenCentral()
}

configurations {
    jdkRt
    sandboxTesting

    all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module('net.corda.djvm:corda-djvm') with module("net.corda.djvm:corda-djvm:$djvm_version")
            }
        }
    }

    // This is for the latest deterministic Corda SNAPSHOT artifacts...
    [ compileClasspath, runtimeClasspath ].forEach { cfg ->
        cfg.resolutionStrategy {
            // Always check the repository for a newer SNAPSHOT.
            cacheChangingModulesFor 0, 'seconds'

            dependencySubstitution {
                substitute module('net.corda:corda-core') with module("net.corda:corda-core-deterministic:$corda_version")
                substitute module('net.corda:corda-serialization') with module("net.corda:corda-serialization-deterministic:$corda_version")
            }
        }
    }

    [ testCompileClasspath, testRuntimeClasspath ].forEach { cfg ->
        cfg.resolutionStrategy {
            // Always check the repository for a newer SNAPSHOT.
            cacheChangingModulesFor 0, 'seconds'
        }
    }
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.scala-lang:scala-library:$scala_version"
    implementation "com.r3.corda.lib.tokens:tokens-contracts:$corda_tokens_version"
    implementation "net.corda:corda-core:$corda_version"
    implementation "net.corda:corda-serialization:$corda_version"

    testImplementation "com.r3.corda.lib.tokens:tokens-workflows:$corda_tokens_version"
    testImplementation "com.r3.corda.lib.tokens:tokens-money:$corda_tokens_version"
    testImplementation "net.corda:corda-serialization-djvm:$corda_version"
    testImplementation "net.corda:corda-core-test-utils:$corda_version"
    testImplementation "net.corda.djvm:corda-djvm:$djvm_version"
    testRuntimeOnly "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version"
    jdkRt "net.corda:deterministic-rt:$deterministic_rt_version"

    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation "org.assertj:assertj-core:$assertj_version"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"

    sandboxTesting sourceSets.getByName('main').runtimeClasspath
    sandboxTesting "net.corda:corda-deserializers-djvm:$corda_version"
    sandboxTesting "org.slf4j:slf4j-nop:$slf4j_version"
}

tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = VERSION_1_8
    targetCompatibility = VERSION_1_8
    options.compilerArgs << '-parameters' << '-Werror'
    options.encoding = 'UTF-8'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        languageVersion = '1.3'
        apiVersion = '1.3'
        jvmTarget = VERSION_1_8
        javaParameters = true    // Required for reflection / deserialization
        freeCompilerArgs = ['-Xjvm-default=enable']
        allWarningsAsErrors = true
    }
}

tasks.withType(ScalaCompile).configureEach {
    scalaCompileOptions.with {
        encoding = 'UTF-8'
        additionalParameters = [
            '-opt:l:method',
            '-opt:l:inline', '-opt-inline-from:**'
        ]
    }
}

def djvmProject = gradle.includedBuilds.find { it.name == 'deterministic-jvm-sandbox' }

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    systemProperty 'deterministic-rt.path', configurations.jdkRt.asPath
    systemProperty 'sandbox-libraries.path', configurations.sandboxTesting.asPath

    if (djvmProject) {
        dependsOn djvmProject.task(':djvm:bootstrap:assemble')
    }
}

wrapper {
    gradleVersion = '5.6.4'
    distributionType = Wrapper.DistributionType.ALL
}
